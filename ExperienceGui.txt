-- ExperienceGui (fixed + improved UI)
-- Place in a LocalScript under StarterPlayerScripts (or run as loadstring)

local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local TextService = game:GetService("TextService")

local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

-- util: safe scale of UDim2 (for click animation use)
local function scaleUDim2(size, scaleFactor)
    return UDim2.new(
        size.X.Scale * scaleFactor,
        math.floor(size.X.Offset * scaleFactor),
        size.Y.Scale * scaleFactor,
        math.floor(size.Y.Offset * scaleFactor)
    )
end

-- Destroy previous instance if present
local existing = playerGui:FindFirstChild("ExperienceGui")
if existing then
    existing:Destroy()
end

-- ScreenGui
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "ExperienceGui"
screenGui.ResetOnSpawn = false
screenGui.Parent = playerGui
screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

-- Main Frame
local mainFrame = Instance.new("Frame")
mainFrame.Name = "MainFrame"
mainFrame.Size = UDim2.new(0, 600, 0, 420)
mainFrame.Position = UDim2.new(0.5, -300, 0.5, -210)
mainFrame.AnchorPoint = Vector2.new(0.5, 0.5)
mainFrame.BackgroundColor3 = Color3.fromRGB(22, 24, 30)
mainFrame.BorderSizePixel = 0
mainFrame.Parent = screenGui
mainFrame.ClipsDescendants = true

local mainCorner = Instance.new("UICorner", mainFrame)
mainCorner.CornerRadius = UDim.new(0, 14)

local mainStroke = Instance.new("UIStroke", mainFrame)
mainStroke.Thickness = 1
mainStroke.Color = Color3.fromRGB(40, 40, 50)
mainStroke.Transparency = 0.5

-- Header (draggable)
local header = Instance.new("Frame")
header.Name = "Header"
header.Size = UDim2.new(1, 0, 0, 46)
header.Position = UDim2.new(0, 0, 0, 0)
header.BackgroundTransparency = 0
header.BackgroundColor3 = Color3.fromRGB(28, 30, 36)
header.Parent = mainFrame

local headerCorner = Instance.new("UICorner", header)
headerCorner.CornerRadius = UDim.new(0, 14)

local title = Instance.new("TextLabel", header)
title.Name = "Title"
title.Size = UDim2.new(0.6, 0, 1, 0)
title.Position = UDim2.new(0.03, 0, 0, 0)
title.BackgroundTransparency = 1
title.Text = "Experience — Random"
title.TextColor3 = Color3.fromRGB(230, 230, 240)
title.Font = Enum.Font.GothamSemibold
title.TextSize = 18
title.TextXAlignment = Enum.TextXAlignment.Left

local closeButton = Instance.new("TextButton", header)
closeButton.Name = "Close"
closeButton.Size = UDim2.new(0, 36, 0, 28)
closeButton.Position = UDim2.new(1, -44, 0.5, -14)
closeButton.BackgroundColor3 = Color3.fromRGB(200, 60, 60)
closeButton.BorderSizePixel = 0
closeButton.Text = "✕"
closeButton.TextColor3 = Color3.fromRGB(255,255,255)
closeButton.Font = Enum.Font.GothamBold
closeButton.TextSize = 18

local closeCorner = Instance.new("UICorner", closeButton)
closeCorner.CornerRadius = UDim.new(0, 8)

-- Make frame draggable
do
    local dragging, dragInput, dragStart, startPos = false, nil, nil, nil
    header.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = mainFrame.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    header.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)
    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging and dragStart and startPos then
            local delta = input.Position - dragStart
            mainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        end
    end)
end

-- Body (below header)
local body = Instance.new("Frame", mainFrame)
body.Name = "Body"
body.Size = UDim2.new(1, 0, 1, -46)
body.Position = UDim2.new(0, 0, 0, 46)
body.BackgroundTransparency = 1

-- Tabs bar
local tabsBar = Instance.new("Frame", body)
tabsBar.Name = "TabsBar"
tabsBar.Size = UDim2.new(1, 0, 0, 44)
tabsBar.Position = UDim2.new(0, 0, 0, 0)
tabsBar.BackgroundColor3 = Color3.fromRGB(26, 28, 34)

local tabsUI = Instance.new("UIListLayout", tabsBar)
tabsUI.FillDirection = Enum.FillDirection.Horizontal
tabsUI.HorizontalAlignment = Enum.HorizontalAlignment.Left
tabsUI.SortOrder = Enum.SortOrder.LayoutOrder
tabsUI.Padding = UDim.new(0, 6)

local tabNames = {"Console", "Basic Needs", "Info"}
local tabButtonsList = {}

for i, name in ipairs(tabNames) do
    local btn = Instance.new("TextButton")
    btn.Name = name .. "Tab"
    btn.Parent = tabsBar
    btn.Size = UDim2.new(0, 160, 1, -12)
    btn.BackgroundColor3 = Color3.fromRGB(30, 32, 38)
    btn.BorderSizePixel = 0
    btn.Text = name
    btn.TextColor3 = Color3.fromRGB(190, 190, 200)
    btn.Font = Enum.Font.Gotham
    btn.TextSize = 14
    btn.LayoutOrder = i
    local c = Instance.new("UICorner", btn)
    c.CornerRadius = UDim.new(0, 8)
    tabButtonsList[name] = btn
end

-- Content area (scrolling)
local contentHolder = Instance.new("Frame", body)
contentHolder.Name = "ContentHolder"
contentHolder.Size = UDim2.new(1, -20, 1, -60)
contentHolder.Position = UDim2.new(0, 10, 0, 54)
contentHolder.BackgroundTransparency = 1

-- Use a single ScrollingFrame for variable content
local contentFrame = Instance.new("Frame", contentHolder)
contentFrame.Name = "ContentFrame"
contentFrame.Size = UDim2.new(1, 0, 1, 0)
contentFrame.BackgroundTransparency = 1

-- Panels table
local panels = {}

-- Helper: create panel
local function makePanel(name)
    local f = Instance.new("Frame")
    f.Name = name .. "Panel"
    f.Size = UDim2.new(1, 0, 1, 0)
    f.BackgroundTransparency = 1
    f.Visible = false
    f.Parent = contentFrame
    panels[name] = f
    return f
end

-- Console Panel
local consolePanel = makePanel("Console")

-- Output scroll region
local outputFrame = Instance.new("ScrollingFrame")
outputFrame.Name = "Output"
outputFrame.Parent = consolePanel
outputFrame.Size = UDim2.new(1, 0, 0.52, 0)
outputFrame.Position = UDim2.new(0, 0, 0, 0)
outputFrame.BackgroundColor3 = Color3.fromRGB(18, 20, 26)
outputFrame.BorderSizePixel = 0
outputFrame.AutomaticCanvasSize = Enum.AutomaticSize.Y
outputFrame.ScrollBarThickness = 6
outputFrame.ScrollBarImageColor3 = Color3.fromRGB(100,100,110)
outputFrame.CanvasSize = UDim2.new(0, 0, 0, 0)

local outCorner = Instance.new("UICorner", outputFrame)
outCorner.CornerRadius = UDim.new(0, 8)

local outputLayout = Instance.new("UIListLayout", outputFrame)
outputLayout.SortOrder = Enum.SortOrder.LayoutOrder
outputLayout.Padding = UDim.new(0, 6)

-- Code editor frame
local editorFrame = Instance.new("Frame", consolePanel)
editorFrame.Name = "Editor"
editorFrame.Size = UDim2.new(1, 0, 0.36, 0)
editorFrame.Position = UDim2.new(0, 0, 0.54, 0)
editorFrame.BackgroundTransparency = 1

local editorBox = Instance.new("TextBox", editorFrame)
editorBox.Name = "EditorBox"
editorBox.Size = UDim2.new(1, -120, 1, 0)
editorBox.Position = UDim2.new(0, 0, 0, 0)
editorBox.BackgroundColor3 = Color3.fromRGB(18, 20, 26)
editorBox.BorderSizePixel = 0
editorBox.Text = "-- Paste / edit your Lua here\nprint('Hello from loadstring')"
editorBox.TextColor3 = Color3.fromRGB(210,210,220)
editorBox.Font = Enum.Font.Code
editorBox.TextSize = 14
editorBox.TextWrapped = true
editorBox.ClearTextOnFocus = false
editorBox.MultiLine = true

local editorCorner = Instance.new("UICorner", editorBox)
editorCorner.CornerRadius = UDim.new(0, 8)

-- Buttons for editor
local execButton = Instance.new("TextButton", editorFrame)
execButton.Name = "ExecCode"
execButton.Size = UDim2.new(0, 84, 0, 40)
execButton.Position = UDim2.new(1, -92, 0, 8)
execButton.BackgroundColor3 = Color3.fromRGB(0, 160, 110)
execButton.BorderSizePixel = 0
execButton.Text = "Exec"
execButton.Font = Enum.Font.GothamBold
execButton.TextSize = 14
execButton.TextColor3 = Color3.fromRGB(255,255,255)
local execCorner = Instance.new("UICorner", execButton)
execCorner.CornerRadius = UDim.new(0, 8)

local runLoadStringButton = Instance.new("TextButton", editorFrame)
runLoadStringButton.Name = "RunLoad"
runLoadStringButton.Size = UDim2.new(0, 84, 0, 40)
runLoadStringButton.Position = UDim2.new(1, -92, 0, 56)
runLoadStringButton.BackgroundColor3 = Color3.fromRGB(0, 120, 220)
runLoadStringButton.BorderSizePixel = 0
runLoadStringButton.Text = "Run Loadstring"
runLoadStringButton.Font = Enum.Font.GothamBold
runLoadStringButton.TextSize = 12
runLoadStringButton.TextColor3 = Color3.fromRGB(255,255,255)
local runCorner = Instance.new("UICorner", runLoadStringButton)
runCorner.CornerRadius = UDim.new(0, 8)

-- Helper: add output entry
local function addOutput(text, color)
    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(1, -12, 0, 18)
    -- measure approximate height based on text size (improve over #text)
    local textSize = TextService:GetTextSize(text, 14, Enum.Font.Code, Vector2.new(500, 9999))
    label.Size = UDim2.new(1, -12, 0, math.clamp(textSize.Y + 8, 18, 200))
    label.BackgroundTransparency = 1
    label.Text = text
    label.TextColor3 = color or Color3.fromRGB(220,220,230)
    label.TextWrapped = true
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.TextYAlignment = Enum.TextYAlignment.Top
    label.Font = Enum.Font.Code
    label.TextSize = 14
    label.Parent = outputFrame

    -- ensure scroll to bottom (use layout absolute content size)
    task.defer(function()
        local total = outputLayout.AbsoluteContentSize.Y
        outputFrame.CanvasPosition = Vector2.new(0, math.max(0, total - outputFrame.AbsoluteWindowSize.Y))
    end)
end

-- Exec action (safe, reusable)
local function execAction(code)
    if not code or code == "" then return end
    addOutput("> " .. code, Color3.fromRGB(150, 255, 150))
    -- run in pcall to catch errors
    local success, result = pcall(function()
        local fn, compileErr = loadstring(code)
        if not fn then error(compileErr) end
        return fn()
    end)
    if success then
        addOutput("Success", Color3.fromRGB(100, 255, 150))
    else
        addOutput("Error: " .. tostring(result), Color3.fromRGB(255, 120, 120))
    end
end

execButton.MouseButton1Click:Connect(function()
    execAction(editorBox.Text)
end)

-- allow Ctrl+Enter or Enter+FocusLost to run
editorBox.FocusLost:Connect(function(enter)
    if enter then execAction(editorBox.Text) end
end)

-- Run Loadstring: same as exec but labeled
runLoadStringButton.MouseButton1Click:Connect(function()
    execAction(editorBox.Text)
end)

-- Basic Needs Panel
local basicPanel = makePanel("Basic Needs")
local basicLayout = Instance.new("UIListLayout", basicPanel)
basicLayout.Padding = UDim.new(0, 10)
basicLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
basicLayout.SortOrder = Enum.SortOrder.LayoutOrder

local function makeToggle(name, y)
    local btn = Instance.new("TextButton", basicPanel)
    btn.Name = name:gsub(" ", "") .. "Btn"
    btn.Size = UDim2.new(0.9, 0, 0, 44)
    btn.BackgroundColor3 = Color3.fromRGB(200, 60, 60)
    btn.BorderSizePixel = 0
    btn.Text = name .. ": OFF"
    btn.Font = Enum.Font.GothamBold
    btn.TextSize = 16
    btn.TextColor3 = Color3.fromRGB(255,255,255)
    local c = Instance.new("UICorner", btn)
    c.CornerRadius = UDim.new(0, 8)
    return btn
end

-- Fly toggle (with safe normalization)
local flyBtn = makeToggle("Fly")
local flying = false
local flyConn = nil
local flySpeed = 60

local function enableFly(enable)
    local character = player.Character
    if not character then return end
    local rootPart = character:FindFirstChild("HumanoidRootPart")
    if not rootPart then return end

    -- cleanup
    if flyConn then
        flyConn:Disconnect()
        flyConn = nil
    end
    if rootPart:FindFirstChild("FlyBodyVelocity") then
        rootPart.FlyBodyVelocity:Destroy()
    end
    if rootPart:FindFirstChild("FlyBodyAngularVelocity") then
        rootPart.FlyBodyAngularVelocity:Destroy()
    end

    if enable then
        local bv = Instance.new("BodyVelocity")
        bv.Name = "FlyBodyVelocity"
        bv.MaxForce = Vector3.new(1e5, 1e5, 1e5)
        bv.Velocity = Vector3.new(0,0,0)
        bv.Parent = rootPart

        local ba = Instance.new("BodyAngularVelocity")
        ba.Name = "FlyBodyAngularVelocity"
        ba.MaxTorque = Vector3.new(1e5,1e5,1e5)
        ba.AngularVelocity = Vector3.new(0,0,0)
        ba.Parent = rootPart

        flyConn = RunService.Heartbeat:Connect(function()
            if not flying or not character or not rootPart or not rootPart.Parent then return end
            local camera = workspace.CurrentCamera
            if not camera then return end
            local look = camera.CFrame.LookVector
            local right = camera.CFrame.RightVector
            local velocity = Vector3.new(0,0,0)

            if UserInputService:IsKeyDown(Enum.KeyCode.W) then velocity = velocity + look end
            if UserInputService:IsKeyDown(Enum.KeyCode.S) then velocity = velocity - look end
            if UserInputService:IsKeyDown(Enum.KeyCode.A) then velocity = velocity - right end
            if UserInputService:IsKeyDown(Enum.KeyCode.D) then velocity = velocity + right end
            if UserInputService:IsKeyDown(Enum.KeyCode.Space) then velocity = velocity + Vector3.new(0,1,0) end
            if UserInputService:IsKeyDown(Enum.KeyCode.LeftShift) then velocity = velocity + Vector3.new(0,-1,0) end

            if velocity.Magnitude > 0 then
                bv.Velocity = velocity.Unit * flySpeed
            else
                bv.Velocity = Vector3.new(0,0,0)
            end
        end)
    end
end

flyBtn.MouseButton1Click:Connect(function()
    flying = not flying
    flyBtn.Text = "Fly: " .. (flying and "ON" or "OFF")
    flyBtn.BackgroundColor3 = flying and Color3.fromRGB(60,200,80) or Color3.fromRGB(200,60,60)
    enableFly(flying)
end)

-- Speed control
local speedFrame = Instance.new("Frame", basicPanel)
speedFrame.Size = UDim2.new(0.9, 0, 0, 64)
speedFrame.BackgroundTransparency = 1
local speedLabel = Instance.new("TextLabel", speedFrame)
speedLabel.Size = UDim2.new(1, 0, 0.5, 0)
speedLabel.BackgroundTransparency = 1
speedLabel.Text = "Walk Speed: 16"
speedLabel.Font = Enum.Font.Gotham
speedLabel.TextSize = 14
speedLabel.TextColor3 = Color3.fromRGB(230,230,240)
local speedInput = Instance.new("TextBox", speedFrame)
speedInput.Size = UDim2.new(1, 0, 0.5, 0)
speedInput.Position = UDim2.new(0, 0, 0.5, 0)
speedInput.BackgroundColor3 = Color3.fromRGB(18,20,26)
speedInput.BorderSizePixel = 0
speedInput.Text = "16"
speedInput.Font = Enum.Font.Code
speedInput.TextSize = 14
speedInput.TextColor3 = Color3.fromRGB(210,210,220)
local spCorner = Instance.new("UICorner", speedInput)
spCorner.CornerRadius = UDim.new(0,8)

speedInput.FocusLost:Connect(function(enter)
    local val = math.clamp(tonumber(speedInput.Text) or 16, 0, 500)
    speedInput.Text = tostring(val)
    speedLabel.Text = "Walk Speed: " .. tostring(val)
    local humanoid = player.Character and player.Character:FindFirstChild("Humanoid")
    if humanoid then humanoid.WalkSpeed = val end
end)

-- Jump power control
local jumpFrame = Instance.new("Frame", basicPanel)
jumpFrame.Size = UDim2.new(0.9, 0, 0, 64)
jumpFrame.BackgroundTransparency = 1
local jumpLabel = Instance.new("TextLabel", jumpFrame)
jumpLabel.Size = UDim2.new(1, 0, 0.5, 0)
jumpLabel.BackgroundTransparency = 1
jumpLabel.Text = "Jump Power: 50"
jumpLabel.Font = Enum.Font.Gotham
jumpLabel.TextSize = 14
jumpLabel.TextColor3 = Color3.fromRGB(230,230,240)
local jumpInput = Instance.new("TextBox", jumpFrame)
jumpInput.Size = UDim2.new(1, 0, 0.5, 0)
jumpInput.Position = UDim2.new(0, 0, 0.5, 0)
jumpInput.BackgroundColor3 = Color3.fromRGB(18,20,26)
jumpInput.BorderSizePixel = 0
jumpInput.Text = "50"
jumpInput.Font = Enum.Font.Code
jumpInput.TextSize = 14
jumpInput.TextColor3 = Color3.fromRGB(210,210,220)
local jpCorner = Instance.new("UICorner", jumpInput)
jpCorner.CornerRadius = UDim.new(0,8)

jumpInput.FocusLost:Connect(function(enter)
    local val = math.clamp(tonumber(jumpInput.Text) or 50, 0, 500)
    jumpInput.Text = tostring(val)
    jumpLabel.Text = "Jump Power: " .. tostring(val)
    local humanoid = player.Character and player.Character:FindFirstChild("Humanoid")
    if humanoid then humanoid.JumpPower = val end
end)

-- Noclip toggle (makes sure HRP is re-enabled)
local noclipBtn = makeToggle("Noclip")
local noclipping = false
local noclipConn = nil

noclipBtn.MouseButton1Click:Connect(function()
    noclipping = not noclipping
    noclipBtn.Text = "Noclip: " .. (noclipping and "ON" or "OFF")
    noclipBtn.BackgroundColor3 = noclipping and Color3.fromRGB(60,200,80) or Color3.fromRGB(200,60,60)

    if noclipping then
        noclipConn = RunService.Stepped:Connect(function()
            local char = player.Character
            if char then
                for _, part in ipairs(char:GetDescendants()) do
                    if part:IsA("BasePart") then
                        part.CanCollide = false
                    end
                end
            end
        end)
    else
        if noclipConn then
            noclipConn:Disconnect()
            noclipConn = nil
        end
        local char = player.Character
        if char then
            for _, part in ipairs(char:GetDescendants()) do
                if part:IsA("BasePart") then
                    part.CanCollide = true
                end
            end
        end
    end
end)

-- Infinite Jump toggle
local infJumpBtn = makeToggle("Infinite Jump")
local infConn = nil
local infEnabled = false
infJumpBtn.MouseButton1Click:Connect(function()
    infEnabled = not infEnabled
    infJumpBtn.Text = "Infinite Jump: " .. (infEnabled and "ON" or "OFF")
    infJumpBtn.BackgroundColor3 = infEnabled and Color3.fromRGB(60,200,80) or Color3.fromRGB(200,60,60)
    if infEnabled then
        infConn = UserInputService.JumpRequest:Connect(function()
            local humanoid = player.Character and player.Character:FindFirstChild("Humanoid")
            if humanoid then
                humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
            end
        end)
    else
        if infConn then infConn:Disconnect() infConn = nil end
    end
end)

-- God Mode toggle (keeps health topped)
local godBtn = makeToggle("God Mode")
local godConn = nil
local godEnabled = false
godBtn.MouseButton1Click:Connect(function()
    godEnabled = not godEnabled
    godBtn.Text = "God Mode: " .. (godEnabled and "ON" or "OFF")
    godBtn.BackgroundColor3 = godEnabled and Color3.fromRGB(60,200,80) or Color3.fromRGB(200,60,60)
    if godEnabled then
        godConn = RunService.Heartbeat:Connect(function()
            local humanoid = player.Character and player.Character:FindFirstChild("Humanoid")
            if humanoid and humanoid.Health < humanoid.MaxHealth then
                humanoid.Health = humanoid.MaxHealth
            end
        end)
    else
        if godConn then godConn:Disconnect() godConn = nil end
    end
end)

-- Info Panel
local infoPanel = makePanel("Info")
local infoLayout = Instance.new("UIListLayout", infoPanel)
infoLayout.Padding = UDim.new(0, 10)
infoLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center

local playerNameLabel = Instance.new("TextLabel", infoPanel)
playerNameLabel.Size = UDim2.new(0.9, 0, 0, 28)
playerNameLabel.BackgroundTransparency = 1
playerNameLabel.Font = Enum.Font.Gotham
playerNameLabel.TextSize = 16
playerNameLabel.TextColor3 = Color3.fromRGB(230,230,240)
playerNameLabel.Text = "Player: " .. player.Name

local userIdLabel = Instance.new("TextLabel", infoPanel)
userIdLabel.Size = UDim2.new(0.9, 0, 0, 28)
userIdLabel.BackgroundTransparency = 1
userIdLabel.Font = Enum.Font.Gotham
userIdLabel.TextSize = 14
userIdLabel.TextColor3 = Color3.fromRGB(200,200,210)
userIdLabel.Text = "UserId: " .. tostring(player.UserId)

local displayNameLabel = Instance.new("TextLabel", infoPanel)
displayNameLabel.Size = UDim2.new(0.9, 0, 0, 28)
displayNameLabel.BackgroundTransparency = 1
displayNameLabel.Font = Enum.Font.Gotham
displayNameLabel.TextSize = 14
displayNameLabel.TextColor3 = Color3.fromRGB(200,200,210)
displayNameLabel.Text = "DisplayName: " .. (player.DisplayName or "N/A")

local fpsLabel = Instance.new("TextLabel", infoPanel)
fpsLabel.Size = UDim2.new(0.9, 0, 0, 28)
fpsLabel.BackgroundTransparency = 1
fpsLabel.Font = Enum.Font.Gotham
fpsLabel.TextSize = 14
fpsLabel.TextColor3 = Color3.fromRGB(200,200,210)
fpsLabel.Text = "FPS: Calculating..."

-- FPS calc
do
    local last = tick()
    local frames = 0
    RunService.Heartbeat:Connect(function()
        frames = frames + 1
        if tick() - last >= 1 then
            fpsLabel.Text = "FPS: " .. tostring(math.floor(frames))
            frames = 0
            last = tick()
        end
    end)
end

-- Tab switching
local currentTab = "Console"
local function switchTab(name)
    for k,v in pairs(panels) do
        v.Visible = (k == name)
    end
    for tname, btn in pairs(tabButtonsList) do
        local active = (tname == name)
        btn.BackgroundColor3 = active and Color3.fromRGB(12,140,220) or Color3.fromRGB(30,32,38)
        btn.TextColor3 = active and Color3.fromRGB(255,255,255) or Color3.fromRGB(190,190,200)
    end
    currentTab = name
end

for name, btn in pairs(tabButtonsList) do
    btn.MouseButton1Click:Connect(function()
        switchTab(name)
    end)
end

-- initial tab
switchTab("Console")

-- Clean close
closeButton.MouseButton1Click:Connect(function()
    if flyConn then flyConn:Disconnect() end
    if noclipConn then noclipConn:Disconnect() end
    if infConn then infConn:Disconnect() end
    if godConn then godConn:Disconnect() end
    screenGui:Destroy()
end)

-- ensure toggles reapply on CharacterAdded
player.CharacterAdded:Connect(function()
    task.wait(1)
    if flying then enableFly(true) end
    if noclipping then
        -- force rerun noclip loop
        noclipConn = RunService.Stepped:Connect(function()
            local char = player.Character
            if char then
                for _, part in ipairs(char:GetDescendants()) do
                    if part:IsA("BasePart") then
                        part.CanCollide = false
                    end
                end
            end
        end)
    end
    if infEnabled then
        -- nothing to rebind
    end
end)

-- Entrance tween (subtle)
mainFrame.Position = UDim2.new(0.5, -300, 0.2, 0)
mainFrame.Size = UDim2.new(0, 500, 0, 320)
TweenService:Create(mainFrame, TweenInfo.new(0.5, Enum.EasingStyle.Back), {
    Position = UDim2.new(0.5, -300, 0.5, -160),
    Size = UDim2.new(0, 600, 0, 420)
}):Play()

-- initial helper output
addOutput("Console Initialized. Edit code below and press Exec.", Color3.fromRGB(160,160,255))
