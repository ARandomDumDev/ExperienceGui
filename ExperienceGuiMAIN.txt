-- scriptblox api very very cool

local function StartExperienceGui()
    local HttpService = game:GetService("HttpService")
    local Players = game:GetService("Players")
    local LocalPlayer = Players.LocalPlayer

    -- Helper functions
    local function safeGet(url)
        local ok, res = pcall(function() return HttpService:GetAsync(url) end)
        if ok then return res end
        return nil, res
    end

    local function sanitizeFilename(name)
        -- Replace characters that may break filenames with underscore
        return name:gsub("[^%w%-%_ ]", "_"):gsub("%s+", "_")
    end

    local function ensureFolder(folderName)
        if (type(isfolder) == "function") and not isfolder(folderName) then
            pcall(function() makefolder(folderName) end)
        end
    end

    -- Destroy leftover maintenance GUI
    for _, gui in ipairs(game.CoreGui:GetChildren()) do
        if gui.Name:find("ExperienceGui - Maintenance") then
            gui:Destroy()
        end
    end

    -- Load Rayfield
    local Rayfield = loadstring(game:HttpGet("https://sirius.menu/rayfield"))()

    -- Main Window
    local Window = Rayfield:CreateWindow({
        Name = "ExperienceGui",
        LoadingTitle = "ExperienceGui",
        LoadingSubtitle = "Made by CoolDown",
        ConfigurationSaving = { Enabled = true, FolderName = "ExperienceGui", FileName = "Config" },
        Discord = { Enabled = false },
        KeySystem = true,
        KeySettings = {
            Title = "ExperienceGui Access",
            Subtitle = "Enter Password",
            Note = "Password required to continue",
            FileName = "ExperienceKey",
            SaveKey = false,
            GrabKeyFromSite = false,
            Key = {"CoolDownExperience"}
        }
    })

    -- Track key success
    local keyPassed = false
    if Window.KeySystem then
        Window.KeySystem.OnSuccess = function()
            keyPassed = true
        end
    end

    -- Fix X/minimize: hide after successful key entry
    Window.OnClose = function()
        if keyPassed then
            Window:Hide()
        else
            Window:Destroy()
        end
    end

    -- Tabs
    local HomeTab = Window:CreateTab("Home", 4483362458)
    local NeedsTab = Window:CreateTab("Basic Needs", 4483362458)
    local ScriptsTab = Window:CreateTab("Script Library", 4483362458)

    -- SCRIPT EXECUTOR TAB (before News)
    local ExecTab = Window:CreateTab("Script Executor", 4483362458)
    local _ = ExecTab:CreateSection("Run Custom Code")
    local codeString, urlString = "", ""
    local CodeInput = ExecTab:CreateInput({
        Name = "Lua Code",
        PlaceholderText = "Type Lua code here...",
        RemoveTextAfterFocusLost = false,
        Callback = function(text) codeString = text end,
    })
    local URLInput = ExecTab:CreateInput({
        Name = "Script URL",
        PlaceholderText = "Type script URL here (raw .lua URL)...",
        RemoveTextAfterFocusLost = false,
        Callback = function(text) urlString = text end,
    })
    ExecTab:CreateButton({
        Name = "Execute",
        Callback = function()
            if codeString ~= "" then
                local ok, err = pcall(function()
                    local fn = loadstring(codeString)
                    if fn then fn() end
                end)
                if not ok then warn("Failed to execute Lua code:", err) end
            elseif urlString ~= "" then
                local ok, err = pcall(function()
                    local scriptText = game:HttpGet(urlString)
                    local fn = loadstring(scriptText)
                    if fn then fn() end
                end)
                if not ok then warn("Failed to execute URL script:", err) end
            else
                Rayfield:Notify({Title = "Execute", Content = "No code or URL provided.", Duration = 2})
            end
            -- Clear inputs
            codeString = ""
            urlString = ""
            pcall(function() ExecTab.Elements["Lua Code"].element.InputFrame.InputBox.Text = "" end)
            pcall(function() ExecTab.Elements["Script URL"].element.InputFrame.InputBox.Text = "" end)
        end,
    })

    -- ScriptBlox Tab
    local SBTab = Window:CreateTab("ScriptBlox", 4483362458)
    local trendingSection = SBTab:CreateSection("Trending")
    local latestSection = SBTab:CreateSection("Latest")
    local searchSection = SBTab:CreateSection("Search")

    -- ScriptBlox helpers
    local function fetchTrending()
        trendingSection:CreateLabel("Fetching trending...")
        local res, err = safeGet("https://scriptblox.com/api/script/trending")
        trendingSection:CreateLabel("") -- spacer
        if not res then
            trendingSection:CreateLabel("⚠️ Failed to fetch trending: "..tostring(err))
            return
        end
        local ok, data = pcall(function() return HttpService:JSONDecode(res) end)
        if not ok or not data or not data.result or not data.result.scripts then
            trendingSection:CreateLabel("⚠️ Unexpected response for trending")
            return
        end

        for _, script in ipairs(data.result.scripts) do
            local title = script.title or "Untitled"
            local gameName = (script.game and script.game.name) and ("[" .. script.game.name .. "]") or ""
            trendingSection:CreateLabel(title .. " " .. gameName)

            -- Execute (needs raw fetch)
            trendingSection:CreateButton({
                Name = "Execute "..title,
                Callback = function()
                    local rawRes, rawErr = safeGet("https://scriptblox.com/api/script/raw/" .. tostring(script._id))
                    if not rawRes then
                        Rayfield:Notify({Title="Execute", Content="Failed to fetch raw script.", Duration=2})
                        return
                    end
                    local ok2, rawData = pcall(function() return HttpService:JSONDecode(rawRes) end)
                    local code = nil
                    if ok2 and rawData then
                        code = rawData.script or rawData.raw or rawData.code
                    end
                    if not code then
                        Rayfield:Notify({Title="Execute", Content="No code found for this script.", Duration=2})
                        return
                    end
                    local success, err = pcall(function()
                        local fn = loadstring(code)
                        if fn then fn() end
                    end)
                    if not success then warn("ScriptBlox trending execute error:", err) end
                end
            })

            -- Save
            trendingSection:CreateButton({
                Name = "Save "..title,
                Callback = function()
                    local rawRes, rawErr = safeGet("https://scriptblox.com/api/script/raw/" .. tostring(script._id))
                    if not rawRes then
                        Rayfield:Notify({Title="Save", Content="Failed to fetch raw script.", Duration=2})
                        return
                    end
                    local ok2, rawData = pcall(function() return HttpService:JSONDecode(rawRes) end)
                    local code = nil
                    if ok2 and rawData then
                        code = rawData.script or rawData.raw or rawData.code
                    end
                    if not code then
                        Rayfield:Notify({Title="Save", Content="No code to save.", Duration=2})
                        return
                    end
                    ensureFolder("ExperienceGui")
                    local filename = sanitizeFilename(title)
                    local path = "ExperienceGui/" .. filename .. ".lua"
                    local okw, errw = pcall(function() writefile(path, code) end)
                    if okw then
                        Rayfield:Notify({Title="Saved", Content=title.." saved.", Duration=2})
                        -- update Script Library later by user refresh or on next open
                    else
                        Rayfield:Notify({Title="Save Failed", Content=tostring(errw), Duration=2})
                    end
                end
            })
        end
    end

    local function fetchLatest()
        latestSection:CreateLabel("Fetching latest...")
        local res, err = safeGet("https://scriptblox.com/api/script/fetch")
        latestSection:CreateLabel("") -- spacer
        if not res then
            latestSection:CreateLabel("⚠️ Failed to fetch latest: "..tostring(err))
            return
        end
        local ok, data = pcall(function() return HttpService:JSONDecode(res) end)
        if not ok or not data or not data.result or not data.result.scripts then
            latestSection:CreateLabel("⚠️ Unexpected response for latest")
            return
        end

        for _, script in ipairs(data.result.scripts) do
            local title = script.title or "Untitled"
            local gameName = (script.game and script.game.name) and ("[" .. script.game.name .. "]") or ""
            latestSection:CreateLabel(title .. " " .. gameName)

            -- Execute (script text available)
            latestSection:CreateButton({
                Name = "Execute "..title,
                Callback = function()
                    if not script.script then
                        Rayfield:Notify({Title="Execute", Content="No script content available.", Duration=2})
                        return
                    end
                    local ok2, err2 = pcall(function()
                        local fn = loadstring(script.script)
                        if fn then fn() end
                    end)
                    if not ok2 then warn("ScriptBlox latest execute error:", err2) end
                end
            })

            -- Save
            latestSection:CreateButton({
                Name = "Save "..title,
                Callback = function()
                    if not script.script then
                        Rayfield:Notify({Title="Save", Content="No script content available.", Duration=2})
                        return
                    end
                    ensureFolder("ExperienceGui")
                    local filename = sanitizeFilename(title)
                    local path = "ExperienceGui/" .. filename .. ".lua"
                    local okw, errw = pcall(function() writefile(path, script.script) end)
                    if okw then
                        Rayfield:Notify({Title="Saved", Content=title.." saved.", Duration=2})
                    else
                        Rayfield:Notify({Title="Save Failed", Content=tostring(errw), Duration=2})
                    end
                end
            })
        end
    end

    -- Search UI and action
    local searchQuery = ""
    local SearchInput = SBTab:CreateInput({
        Name = "Search Query",
        PlaceholderText = "keywords...",
        RemoveTextAfterFocusLost = false,
        Callback = function(text) searchQuery = text end,
    })
    SBTab:CreateButton({
        Name = "Search",
        Callback = function()
            if (not searchQuery) or searchQuery == "" then
                Rayfield:Notify({Title="Search", Content="Enter a query first.", Duration=2})
                return
            end
            -- Clear previous dynamic labels in search section (best-effort)
            searchSection:CreateLabel("Searching for: "..searchQuery)
            local url = "https://scriptblox.com/api/script/search?q=" .. HttpService:UrlEncode(searchQuery)
            local res, err = safeGet(url)
            if not res then
                searchSection:CreateLabel("⚠️ Search failed: "..tostring(err))
                return
            end
            local ok, data = pcall(function() return HttpService:JSONDecode(res) end)
            if not ok or not data or not data.result or not data.result.scripts then
                searchSection:CreateLabel("⚠️ Unexpected search response")
                return
            end
            for _, script in ipairs(data.result.scripts) do
                local title = script.title or "Untitled"
                local gameName = (script.game and script.game.name) and ("[" .. script.game.name .. "]") or ""
                searchSection:CreateLabel(title .. " " .. gameName)

                searchSection:CreateButton({
                    Name = "Execute "..title,
                    Callback = function()
                        if not script.script then
                            Rayfield:Notify({Title="Execute", Content="No script content available.", Duration=2})
                            return
                        end
                        local ok2, err2 = pcall(function()
                            local fn = loadstring(script.script)
                            if fn then fn() end
                        end)
                        if not ok2 then warn("ScriptBlox search execute error:", err2) end
                    end
                })
                searchSection:CreateButton({
                    Name = "Save "..title,
                    Callback = function()
                        if not script.script then
                            Rayfield:Notify({Title="Save", Content="No script content available.", Duration=2})
                            return
                        end
                        ensureFolder("ExperienceGui")
                        local filename = sanitizeFilename(title)
                        local path = "ExperienceGui/" .. filename .. ".lua"
                        local okw, errw = pcall(function() writefile(path, script.script) end)
                        if okw then
                            Rayfield:Notify({Title="Saved", Content=title.." saved.", Duration=2})
                        else
                            Rayfield:Notify({Title="Save Failed", Content=tostring(errw), Duration=2})
                        end
                    end
                })
            end
            -- Clear search input after showing results
            searchQuery = ""
            pcall(function() SBTab.Elements["Search Query"].element.InputFrame.InputBox.Text = "" end)
        end
    })

    -- Load initial ScriptBlox lists (deferred so UI finishes loading)
    task.defer(function()
        pcall(fetchTrending)
        pcall(fetchLatest)
    end)

    -- News tab (kept last)
    local AnnTab = Window:CreateTab("News", 4483362458)

    -- Version from config
    local version = "Unknown"
    do
        local ok, result = pcall(function()
            return game:HttpGet("https://raw.githubusercontent.com/ARandomDumDev/ExperienceGui/refs/heads/main/config.json")
        end)
        if ok then
            local decodeOk, decoded = pcall(function()
                return HttpService:JSONDecode(result)
            end)
            if decodeOk and decoded.version then
                version = decoded.version
            end
        end
    end

    -- Home tab
    HomeTab:CreateLabel("Welcome to ExperienceGui")
    HomeTab:CreateLabel("Made by CoolDown")
    HomeTab:CreateLabel("Client: " .. LocalPlayer.Name)
    HomeTab:CreateLabel("Version " .. version)

    -- Needs tab
    NeedsTab:CreateSlider({
        Name = "WalkSpeed",
        Range = {16, 200},
        Increment = 1,
        Suffix = " speed",
        CurrentValue = 16,
        Flag = "WalkSpeed",
        Callback = function(Value)
            if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
                LocalPlayer.Character.Humanoid.WalkSpeed = Value
            end
        end,
    })

    NeedsTab:CreateSlider({
        Name = "JumpPower",
        Range = {50, 300},
        Increment = 5,
        Suffix = " power",
        CurrentValue = 50,
        Flag = "JumpPower",
        Callback = function(Value)
            if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
                LocalPlayer.Character.Humanoid.JumpPower = Value
            end
        end,
    })

    NeedsTab:CreateButton({
        Name = "Enable Fly",
        Callback = function()
            local ok, err = pcall(function()
                loadstring(game:HttpGet("https://raw.githubusercontent.com/XNEOFF/FlyGuiV3/main/FlyGuiV3.txt"))()
            end)
            if not ok then warn("Fly load failed:", err) end
        end,
    })

    -- Autorun
    task.defer(function()
        pcall(function()
            loadstring(game:HttpGet("https://raw.githubusercontent.com/VapeVoidware/VW-Add/main/loader.lua", true))()
        end)
    end)

    -- Script Library: show saved scripts first + remote Scripts.txt list
    local function RefreshScriptLibrary()
        -- Clear (Rayfield doesn't have a standard clear API; we'll just add a header)
        ScriptsTab:CreateLabel("Saved Scripts (local):")
        -- List local saved scripts
        if type(listfiles) == "function" then
            local ok, files = pcall(function() return listfiles("ExperienceGui") end)
            if ok and type(files) == "table" and #files > 0 then
                for _, filepath in ipairs(files) do
                    if filepath:sub(-4) == ".lua" then
                        local name = filepath:match("ExperienceGui/(.+)%.lua") or filepath
                        ScriptsTab:CreateLabel("• " .. name)
                        ScriptsTab:CreateButton({
                            Name = "Run "..name,
                            Callback = function()
                                local okr, content = pcall(function() return readfile(filepath) end)
                                if okr and content then
                                    local ok2, err2 = pcall(function()
                                        local fn = loadstring(content)
                                        if fn then fn() end
                                    end)
                                    if not ok2 then warn("Saved script run error:", err2) end
                                else
                                    Rayfield:Notify({Title="Run", Content="Failed to read file.", Duration=2})
                                end
                            end
                        })
                        ScriptsTab:CreateButton({
                            Name = "Delete "..name,
                            Callback = function()
                                local okd, errd = pcall(function() return delfile(filepath) end)
                                if okd then
                                    Rayfield:Notify({Title="Deleted", Content=name.." removed.", Duration=2})
                                else
                                    Rayfield:Notify({Title="Delete Failed", Content=tostring(errd), Duration=2})
                                end
                            end
                        })
                    end
                end
            else
                ScriptsTab:CreateLabel("No saved scripts found.")
            end
        else
            ScriptsTab:CreateLabel("File API not available in this environment.")
        end

        ScriptsTab:CreateLabel("") -- spacer
        ScriptsTab:CreateLabel("Remote Scripts (from Scripts.txt):")

        -- Fetch remote Scripts.txt
        local success, result = pcall(function()
            return game:HttpGet("https://raw.githubusercontent.com/ARandomDumDev/ExperienceGui/refs/heads/main/Scripts.txt", true)
        end)
        if not success then
            ScriptsTab:CreateLabel("⚠️ Failed to fetch Scripts.txt")
            warn("HTTP GET failed:", result)
            return
        end

        local decodeSuccess, decodeResult = pcall(function()
            return HttpService:JSONDecode(result)
        end)
        if not decodeSuccess then
            ScriptsTab:CreateLabel("⚠️ Failed to decode Scripts.txt")
            warn("JSON Decode failed:", decodeResult)
            return
        end

        local scripts = decodeResult
        if type(scripts) ~= "table" or #scripts == 0 then
            ScriptsTab:CreateLabel("⚠️ No remote scripts found")
            return
        end

        for _, scriptData in ipairs(scripts) do
            local name = scriptData.name or "Unnamed Script"
            ScriptsTab:CreateLabel(name)
            ScriptsTab:CreateButton({
                Name = "Run "..name,
                Callback = function()
                    if scriptData.url then
                        local ok, err = pcall(function()
                            loadstring(game:HttpGet(scriptData.url, true))()
                        end)
                        if not ok then warn("Failed to load script:", name, err) end
                    elseif scriptData.code then
                        local ok, err = pcall(function()
                            loadstring(scriptData.code)()
                        end)
                        if not ok then warn("Failed to execute script:", name, err) end
                    else
                        warn("No url or code found for script:", name)
                    end
                end
            })
            ScriptsTab:CreateButton({
                Name = "Save "..name,
                Callback = function()
                    -- fetch code if url
                    local code = nil
                    if scriptData.url then
                        local ok, res = pcall(function() return game:HttpGet(scriptData.url, true) end)
                        if ok then code = res end
                    elseif scriptData.code then
                        code = scriptData.code
                    end
                    if not code then
                        Rayfield:Notify({Title="Save", Content="Failed to retrieve script code.", Duration=2})
                        return
                    end
                    ensureFolder("ExperienceGui")
                    local filename = sanitizeFilename(name)
                    local path = "ExperienceGui/" .. filename .. ".lua"
                    local okw, errw = pcall(function() writefile(path, code) end)
                    if okw then
                        Rayfield:Notify({Title="Saved", Content=name.." saved.", Duration=2})
                    else
                        Rayfield:Notify({Title="Save Failed", Content=tostring(errw), Duration=2})
                    end
                end
            })
        end
    end

    task.defer(function()
        task.wait(1)
        pcall(RefreshScriptLibrary)
    end)

    -- Announcements
    local announcementsUrl = "https://raw.githubusercontent.com/ARandomDumDev/ExperienceGui/refs/heads/main/announcementsChangelogs.json"
    local announcementLabels = {}

    local function ClearOldLabels()
        for _, label in ipairs(announcementLabels) do
            pcall(function() label:Set("Text", "") end)
        end
        announcementLabels = {}
    end

    local function LoadAnnouncements()
        ClearOldLabels()
        local success, result = pcall(function()
            return game:HttpGet(announcementsUrl, true)
        end)
        if not success then
            table.insert(announcementLabels, AnnTab:CreateLabel("⚠️ Failed to fetch announcements"))
            warn("HTTP GET failed:", result)
            return
        end

        local data
        local decodeSuccess, decodeResult = pcall(function()
            return HttpService:JSONDecode(result)
        end)
        if not decodeSuccess then
            table.insert(announcementLabels, AnnTab:CreateLabel("⚠️ Failed to decode announcements"))
            warn("JSON Decode failed:", decodeResult)
            return
        end

        data = decodeResult
        if data.announcement then
            table.insert(announcementLabels, AnnTab:CreateLabel("📢 " .. data.announcement))
        else
            table.insert(announcementLabels, AnnTab:CreateLabel("📢 No announcement at this time"))
        end

        if data.changelog then
            table.insert(announcementLabels, AnnTab:CreateLabel("📝 " .. data.changelog))
        else
            table.insert(announcementLabels, AnnTab:CreateLabel("📝 No changelog available"))
        end
    end
    task.defer(function()
        while true do
            pcall(LoadAnnouncements)
            task.wait(60)
        end
    end)

    -- Return the window so loader can manage currentGui
    return Window
end

-- Call function and return for loader
return StartExperienceGui()
