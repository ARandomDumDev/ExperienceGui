-- experienceguimain | fixed something ig

local function StartExperienceGui()
    local HttpService = game:GetService("HttpService")
    local Players = game:GetService("Players")
    local LocalPlayer = Players.LocalPlayer

    -- Destroy leftover maintenance GUI
    for _, gui in ipairs(game.CoreGui:GetChildren()) do
        if gui.Name:find("ExperienceGui - Maintenance") then
            gui:Destroy()
        end
    end

    -- Load Rayfield
    local Rayfield = loadstring(game:HttpGet("https://sirius.menu/rayfield"))()

    -- Main Window
    local Window = Rayfield:CreateWindow({
        Name = "ExperienceGui",
        LoadingTitle = "ExperienceGui",
        LoadingSubtitle = "Made by CoolDown",
        ConfigurationSaving = { Enabled = true, FolderName = "ExperienceGui", FileName = "Config" },
        Discord = { Enabled = false },
        KeySystem = true,
        KeySettings = {
            Title = "ExperienceGui Access",
            Subtitle = "Enter Password",
            Note = "Password required to continue",
            FileName = "ExperienceKey",
            SaveKey = false,
            GrabKeyFromSite = false,
            Key = {"CoolDownExperience"}
        }
    })

    -- Track key success
    local keyPassed = false
    if Window.KeySystem then
        Window.KeySystem.OnSuccess = function()
            keyPassed = true
        end
    end

    -- Fix X/minimize: hide after successful key entry
    Window.OnClose = function()
        if keyPassed then
            Window:Hide()
        else
            Window:Destroy()
        end
    end

    -- Tabs
    local HomeTab = Window:CreateTab("Home", 4483362458)
    local NeedsTab = Window:CreateTab("Basic Needs", 4483362458)
    local ScriptsTab = Window:CreateTab("Script Library", 4483362458)

    -- SCRIPT EXECUTOR TAB (before News)
    local ExecTab = Window:CreateTab("Script Executor", 4483362458)
    local Section = ExecTab:CreateSection("Run Custom Code")
    local codeString, urlString = "", ""
    local CodeInput = ExecTab:CreateInput({
        Name = "Lua Code",
        PlaceholderText = "Type Lua code here...",
        RemoveTextAfterFocusLost = false,
        Callback = function(text) codeString = text end,
    })
    local URLInput = ExecTab:CreateInput({
        Name = "Script URL",
        PlaceholderText = "Type script URL here...",
        RemoveTextAfterFocusLost = false,
        Callback = function(text) urlString = text end,
    })
    ExecTab:CreateButton({
        Name = "Execute",
        Callback = function()
            if codeString ~= "" then
                local ok, err = pcall(function()
                    loadstring(codeString)()
                end)
                if not ok then warn("Failed to execute Lua code:", err) end
            elseif urlString ~= "" then
                local ok, err = pcall(function()
                    local scriptText = game:HttpGet(urlString)
                    loadstring(scriptText)()
                end)
                if not ok then warn("Failed to execute URL script:", err) end
            end
            -- Clear input fields
            codeString = ""
            urlString = ""
            ExecTab.Elements["Lua Code"].element.InputFrame.InputBox.Text = ""
            ExecTab.Elements["Script URL"].element.InputFrame.InputBox.Text = ""
        end,
    })

    -- Version from config
    local version = "Unknown"
    local ok, result = pcall(function()
        return game:HttpGet("https://raw.githubusercontent.com/ARandomDumDev/ExperienceGui/refs/heads/main/config.json")
    end)
    if ok then
        local decodeOk, decoded = pcall(function()
            return HttpService:JSONDecode(result)
        end)
        if decodeOk and decoded.version then
            version = decoded.version
        end
    end

    -- Home tab
    HomeTab:CreateLabel("Welcome to ExperienceGui")
    HomeTab:CreateLabel("Made by CoolDown")
    HomeTab:CreateLabel("Client: " .. LocalPlayer.Name)
    HomeTab:CreateLabel("Version " .. version)

    -- Needs tab
    NeedsTab:CreateSlider({
        Name = "WalkSpeed",
        Range = {16, 200},
        Increment = 1,
        Suffix = " speed",
        CurrentValue = 16,
        Flag = "WalkSpeed",
        Callback = function(Value)
            LocalPlayer.Character.Humanoid.WalkSpeed = Value
        end,
    })

    NeedsTab:CreateSlider({
        Name = "JumpPower",
        Range = {50, 300},
        Increment = 5,
        Suffix = " power",
        CurrentValue = 50,
        Flag = "JumpPower",
        Callback = function(Value)
            LocalPlayer.Character.Humanoid.JumpPower = Value
        end,
    })

    NeedsTab:CreateButton({
        Name = "Enable Fly",
        Callback = function()
            loadstring(game:HttpGet("https://raw.githubusercontent.com/XNEOFF/FlyGuiV3/main/FlyGuiV3.txt"))()
        end,
    })

    -- Autorun
    task.defer(function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/VapeVoidware/VW-Add/main/loader.lua", true))()
    end)

    -- Script Library
    local function LoadScriptLibrary()
        local success, result = pcall(function()
            return game:HttpGet("https://raw.githubusercontent.com/ARandomDumDev/ExperienceGui/refs/heads/main/Scripts.txt", true)
        end)
        if not success then
            ScriptsTab:CreateLabel("⚠️ Failed to fetch Scripts.txt")
            warn("HTTP GET failed:", result)
            return
        end

        local scripts
        local decodeSuccess, decodeResult = pcall(function()
            return HttpService:JSONDecode(result)
        end)
        if not decodeSuccess then
            ScriptsTab:CreateLabel("⚠️ Failed to decode Scripts.txt")
            warn("JSON Decode failed:", decodeResult)
            return
        end

        scripts = decodeResult
        if type(scripts) ~= "table" or #scripts == 0 then
            ScriptsTab:CreateLabel("⚠️ No scripts found")
            return
        end

        for _, scriptData in ipairs(scripts) do
            ScriptsTab:CreateButton({
                Name = scriptData.name or "Unnamed Script",
                Callback = function()
                    if scriptData.url then
                        local ok, err = pcall(function()
                            loadstring(game:HttpGet(scriptData.url, true))()
                        end)
                        if not ok then warn("Failed to load script:", scriptData.name, err) end
                    elseif scriptData.code then
                        local ok, err = pcall(function()
                            loadstring(scriptData.code)()
                        end)
                        if not ok then warn("Failed to execute script:", scriptData.name, err) end
                    else
                        warn("No url or code found for script:", scriptData.name)
                    end
                end
            })
        end
    end
    task.defer(function()
        task.wait(1)
        pcall(LoadScriptLibrary)
    end)

    -- SCRIPTBLOX + SAVED TABS (inserted before announcements)
    local ScriptBloxTab = Window:CreateTab("ScriptBlox Library", 4483362458)
    local SavedTab = Window:CreateTab("Saved Scripts", 4483362458)

    local savedScripts = {}
    local savedFile = "ExperienceGui/SavedScripts.json"

    local function LoadSavedScripts()
        local ok, content = pcall(function()
            return readfile and readfile(savedFile)
        end)
        if ok and content and content ~= "" then
            local success, data = pcall(function()
                return HttpService:JSONDecode(content)
            end)
            if success and type(data) == "table" then
                savedScripts = data
            end
        end
    end

    local function SaveScripts()
        if writefile then
            local ok, json = pcall(function()
                return HttpService:JSONEncode(savedScripts)
            end)
            if ok then
                writefile(savedFile, json)
            end
        end
    end

    local function RefreshSavedTab()
        SavedTab:ClearElements()
        if #savedScripts == 0 then
            SavedTab:CreateLabel("⚠️ No saved scripts yet")
            return
        end

        for _, scriptData in ipairs(savedScripts) do
            SavedTab:CreateButton({
                Name = scriptData.title or "Unnamed Script",
                Callback = function()
                    local ok, err = pcall(function()
                        loadstring(game:HttpGet(scriptData.scriptUrl))()
                    end)
                    if not ok then
                        warn("Failed to run saved script:", scriptData.title, err)
                    end
                end,
            })
        end
    end

    LoadSavedScripts()
    RefreshSavedTab()

    local function LoadScriptBloxLibrary()
        local apiUrl = "https://scriptblox.com/api/script"
        local success, result = pcall(function()
            return game:HttpGet(apiUrl)
        end)
        if not success then
            ScriptBloxTab:CreateLabel("⚠️ Failed to reach ScriptBlox API")
            warn("HTTP GET failed:", result)
            return
        end

        local decodeSuccess, data = pcall(function()
            return HttpService:JSONDecode(result)
        end)
        if not decodeSuccess or not data or not data.result then
            ScriptBloxTab:CreateLabel("⚠️ Invalid ScriptBlox API response")
            warn("Failed to decode ScriptBlox response:", data)
            return
        end

        local scripts = data.result.scripts or {}
        if #scripts == 0 then
            ScriptBloxTab:CreateLabel("⚠️ No scripts available from ScriptBlox")
            return
        end

        for _, scriptInfo in ipairs(scripts) do
            ScriptBloxTab:CreateButton({
                Name = scriptInfo.title or "Unnamed Script",
                Callback = function()
                    if scriptInfo.scriptUrl then
                        local ok, err = pcall(function()
                            local scriptText = game:HttpGet(scriptInfo.scriptUrl)
                            loadstring(scriptText)()
                        end)
                        if not ok then
                            warn("Failed to execute ScriptBlox script:", scriptInfo.title, err)
                        end

                        -- Save for later
                        table.insert(savedScripts, {
                            title = scriptInfo.title,
                            scriptUrl = scriptInfo.scriptUrl
                        })
                        SaveScripts()
                        RefreshSavedTab()
                    else
                        warn("No URL found for:", scriptInfo.title)
                    end
                end,
            })
        end
    end

    task.defer(function()
        task.wait(1)
        pcall(LoadScriptBloxLibrary)
    end)

    -- Announcements tab (kept at the end)
    local AnnTab = Window:CreateTab("News", 4483362458)
    local announcementsUrl = "https://raw.githubusercontent.com/ARandomDumDev/ExperienceGui/refs/heads/main/announcementsChangelogs.json"
    local announcementLabels = {}

    local function ClearOldLabels()
        for _, label in ipairs(announcementLabels) do
            label:Set("Text", "")
        end
        announcementLabels = {}
    end

    local function LoadAnnouncements()
        ClearOldLabels()
        local success, result = pcall(function()
            return game:HttpGet(announcementsUrl, true)
        end)
        if not success then
            table.insert(announcementLabels, AnnTab:CreateLabel("⚠️ Failed to fetch announcements"))
            warn("HTTP GET failed:", result)
            return
        end

        local data
        local decodeSuccess, decodeResult = pcall(function()
            return HttpService:JSONDecode(result)
        end)
        if not decodeSuccess then
            table.insert(announcementLabels, AnnTab:CreateLabel("⚠️ Failed to decode announcements"))
            warn("JSON Decode failed:", decodeResult)
            return
        end

        data = decodeResult
        if data.announcement then
            table.insert(announcementLabels, AnnTab:CreateLabel("📢 " .. data.announcement))
        else
            table.insert(announcementLabels, AnnTab:CreateLabel("📢 No announcement at this time"))
        end

        if data.changelog then
            table.insert(announcementLabels, AnnTab:CreateLabel("📝 " .. data.changelog))
        else
            table.insert(announcementLabels, AnnTab:CreateLabel("📝 No changelog available"))
        end
    end
    task.defer(function()
        while true do
            LoadAnnouncements()
            task.wait(60)
        end
    end)

    -- Return the window so loader can manage currentGui
    return Window
end

return StartExperienceGui()
