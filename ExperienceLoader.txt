-- ExperienceLoader 0.03

local configUrl = "https://raw.githubusercontent.com/ARandomDumDev/ExperienceGui/refs/heads/main/config.json"
local scriptUrl = "https://raw.githubusercontent.com/ARandomDumDev/ExperienceGui/refs/heads/main/ExperienceGuiMAIN.txt"

local HttpService = game:GetService("HttpService")

local currentGui
local currentVersion
local maintenanceGui

local function loadGui()
    local source = game:HttpGet(scriptUrl)
    local fn = loadstring(source)
    currentGui = fn() -- Your main GUI should return the Window
end

local function unloadGui()
    if currentGui and currentGui.Destroy then
        currentGui:Destroy()
    end
    currentGui = nil
end

local function showMaintenance(message)
    if maintenanceGui then return end
    local Rayfield = loadstring(game:HttpGet("https://sirius.menu/rayfield"))()
    local win = Rayfield:CreateWindow({
        Name = "ExperienceGui - Maintenance",
        LoadingTitle = "Maintenance",
        LoadingSubtitle = "Please wait...",
    })
    win:CreateTab("Notice", 4483362458):CreateLabel(message or "Down for maintenance.")
    maintenanceGui = win
end

local function hideMaintenance()
    if maintenanceGui and maintenanceGui.Destroy then
        maintenanceGui:Destroy()
    end
    maintenanceGui = nil
end

-- First check + initial load
task.spawn(function()
    while true do
        local ok, result = pcall(function()
            return game:HttpGet(configUrl)
        end)

        if ok then
            local cfg = HttpService:JSONDecode(result)
            if cfg.maintenance then
                unloadGui()
                showMaintenance(cfg.message)
            else
                hideMaintenance()
                if not currentGui or (cfg.version and cfg.version ~= currentVersion) then
                    unloadGui()
                    loadGui()
                    currentVersion = cfg.version
                end
            end
        else
            warn("Failed to fetch config:", result)
        end

        task.wait(10) -- check every 10s
    end
end)
