local HttpService = game:GetService("HttpService")

-- Cache Rayfield once
local Rayfield = loadstring(game:HttpGet("https://sirius.menu/rayfield"))()

-- URLs
local configUrl = "https://raw.githubusercontent.com/ARandomDumDev/ExperienceGui/refs/heads/main/config.json"
local scriptUrl = "https://raw.githubusercontent.com/ARandomDumDev/ExperienceGui/refs/heads/main/ExperienceGuiMAIN.txt"

-- Maintenance GUI
local maintenanceWin = Rayfield:CreateWindow({
    Name = "ExperienceGui - Maintenance",
    LoadingTitle = "Maintenance",
    LoadingSubtitle = "Please wait...",
})
local maintenanceTab = maintenanceWin:CreateTab("Notice", 4483362458)
local maintenanceLabel = maintenanceTab:CreateLabel("Checking status...")

-- Hide it by default
maintenanceWin:SetVisibility(false)

-- Holder for main GUI
local currentGui
local currentVersion

-- Function to load main GUI
local function loadGui()
    local source = game:HttpGet(scriptUrl)
    local fn = loadstring(source)
    currentGui = fn()
end

-- Function to unload main GUI
local function unloadGui()
    if currentGui and currentGui.Destroy then
        currentGui:Destroy()
    end
    currentGui = nil
end

-- Poll config.json
task.spawn(function()
    while task.wait(10) do
        local ok, result = pcall(function()
            return game:HttpGet(configUrl)
        end)
        if ok then
            local cfg = HttpService:JSONDecode(result)

            if cfg.maintenance then
                -- Show maintenance instantly
                unloadGui()
                maintenanceLabel:Set(cfg.message or "Down for maintenance.")
                maintenanceWin:SetVisibility(true)

            else
                -- Hide maintenance & load main
                maintenanceWin:SetVisibility(false)

                if (not currentGui) or (cfg.version and cfg.version ~= currentVersion) then
                    unloadGui()
                    loadGui()
                    currentVersion = cfg.version
                end
            end
        end
    end
end)
